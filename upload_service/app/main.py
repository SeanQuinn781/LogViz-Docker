import requests

# for file upload module
import os
import json as simplejson
import asyncio
from flask import (
    Flask,
    flash,
    request,
    render_template,
    redirect,
    url_for,
    send_from_directory,
)
from flask_bootstrap import Bootstrap
from werkzeug.utils import secure_filename
from lib.upload_file import uploadfile
from os.path import join, dirname
from allowedFile import allowedFileExtension, allowedFileType
import json
from geolite2 import geolite2
import itertools
import re
import requests
from ip6Regex import ip6Regex
from os.path import join, dirname, realpath
from getStatusCode import getStatusCode
import time

app = Flask(__name__)
app.config["UPLOAD_DIR"] = "/upload_service/app/static/data/"
app.config["ASSET_DIR"] = "static/mapAssets/"
app.config["CLEAN_DIR"] = "/upload_service/app/static/cleanData/"
app.config["HTML_DIR"] = "static/"

# app.config['MAX_CONTENT_LENGTH'] = 100 * 1024 * 1024

IGNORED_FILES = set([".gitignore"])

bootstrap = Bootstrap(app)


@app.route("/upload", methods=["GET", "POST"])
def upload():
    if request.method == "POST":
        files = request.files["file"]
        if files:
            filename = secure_filename(files.filename)
            mime_type = files.content_type
            validFileType = allowedFileType(mime_type)
            # if file extension is not log or a number (example: access.log.2)
            # or if file type,
            if not allowedFileExtension(files.filename) or validFileType == False:
                print("not a valid log file type")
                result = uploadfile(
                    name=filename,
                    type=mime_type,
                    size=0,
                    not_allowed_msg="File type not allowed in app.py validation",
                )

            else:
                uploaded_file_path = os.path.join(app.config["UPLOAD_DIR"], filename)
                files.save(uploaded_file_path)
                size = os.path.getsize(uploaded_file_path)
                result = uploadfile(name=filename, type=mime_type, size=size)

            return simplejson.dumps({"files": [result.get_file()]})

    # get all logs in ./data directory
    if request.method == "GET":
        files = [
            f
            for f in os.listdir(app.config["UPLOAD_DIR"])
            if os.path.isfile(os.path.join(app.config["UPLOAD_DIR"], f))
            and f not in IGNORED_FILES
        ]

        file_display = []

        for f in files:
            size = os.path.getsize(os.path.join(app.config["UPLOAD_DIR"], f))
            file_saved = uploadfile(name=f, size=size)
            file_display.append(file_saved.get_file())

        return simplejson.dumps({"files": file_display})

    return redirect(url_for("index"))



# serve static files
@app.route("/data/<string:filename>", methods=["GET"])
def get_file(filename):
    return send_from_directory(
        os.path.join(app.config["UPLOAD_DIR"]), filename=filename
    )


@app.route("/delete/<string:filename>", methods=["DELETE"])
def deleteFile(filename):

    print("File passed in was: ", filename)

    # function that actually deletes the files after they are gathered below
    def handleDelete(file, lastFile):

        # iterate through all files passed in

        if os.path.exists(file):
            try:
                print("Deleting file: ", file)

                os.remove(file)

                if lastFile:
                    return simplejson.dumps({filename: "True"})

            except:
                if lastFile:
                    return simplejson.dumps("False")

    # define files to be removed (these files are generated by each map)

    log_file = os.path.join(app.config["UPLOAD_DIR"], filename)
    analysis_json = os.path.join(app.config["CLEAN_DIR"], filename + "-analysis.json")
    locations_json = os.path.join(app.config["CLEAN_DIR"], filename + "-locations.json")
    ip_file = os.path.join(app.config["CLEAN_DIR"], "ip.txt")
    log_js = os.path.join(app.config["ASSET_DIR"], "loglist.js")
    locations_js = os.path.join(app.config["ASSET_DIR"], "locations.js")

    # call handleDelete on all the maps files
    # pass a flag to return on the last file TODO: clean this up
    isLastFile = False

    handleDelete(analysis_json, isLastFile)
    handleDelete(locations_json, isLastFile)
    handleDelete(ip_file, isLastFile)
    handleDelete(log_js, isLastFile)
    handleDelete(locations_js, isLastFile)

    isLastFile = True
    handleDelete(log_file, isLastFile)
    return render_template("index.html")

@app.route("/", methods=["GET", "POST"])
def index():
    return render_template("index.html")


if __name__ == "__main__":
    app.run(host="0.0.0.0", debug=True, port=3000)
